apiVersion: v1
kind: Service
metadata:
  name: order-service
  namespace: ecommerce
spec:
  selector: { app: order-service }
  ports:
    - port: 8080
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  namespace: ecommerce
spec:
  replicas: 1
  selector: { matchLabels: { app: order-service } }
  template:
    metadata: { labels: { app: order-service } }
    spec:
      containers:
        - name: order-service
          image: donnchadh00/order-service:latest
          imagePullPolicy: Always
          ports: [{ containerPort: 8080 }]
          env:
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://postgres-order.ecommerce.svc.cluster.local:5432/orderdb
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom: { secretKeyRef: { name: app-secrets, key: POSTGRES_USER } }
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom: { secretKeyRef: { name: app-secrets, key: POSTGRES_PASSWORD } }
            - name: PRODUCT_INTERNAL_TOKEN
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: PRODUCT_INTERNAL_TOKEN
            - name: SPRING_RABBITMQ_HOST
              value: rabbitmq
            - name: SPRING_RABBITMQ_PORT
              value: "5672"
            - name: SPRING_RABBITMQ_VIRTUAL_HOST
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: RABBITMQ_VHOST
            - name: SPRING_RABBITMQ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: RABBITMQ_USER
            - name: SPRING_RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: RABBITMQ_PASSWORD
